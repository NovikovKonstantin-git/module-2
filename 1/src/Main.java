import heirs.Bear;
import heirs.Cat;
import heirs.Fish;
import heirs.Whale;

/*
Абстрактные классы: Животное, Млекопитающее. Все млекопитающие - животные, но не все животные - млекопитающие.
Классы наследники: Млекопитающее, Кошка, Медведь, Кит, Рыба.
Интерфейсы: Позвоночник, Шерсть (Кошка и Медведь), Вода (Рыба и Кит).

В классе родителе задаются основные поля для животных. В классе наследнике они расширяются по нужным параметрам для
млекопитающих. В интерфейсах определяется поведение. В конкретных классах задаётся основная реализация.
В мэйне вызывается и выводится всё нужное.
*/

public class Main {

    public static void main(String[] args) {
        Cat cat = new Cat("Мейнкун Гриша", 2);
        cat.setName("Лесной кот Барсик");
        cat.setAge(5);

        Whale whale = new Whale("Горбатый кит Китёныш", 10);
        Bear bear = new Bear("Белый медведь Мишаня", 3);
        Fish fish = new Fish("Карп Шустрик", 4);

        System.out.println(cat.getName() + ", возраст: " + cat.getAge() +  ", " +
                cat.vertebra("у данной особи нет позвоночника, т.к. это муляж") +
                ", позвончник выполняет функцию защиты: " +  cat.protect(false) + ", полинял на " +
                cat.shed(18) + "%" + ", поседел на " + cat.go_grey(1) + "%" + ", вырос на " +
                cat.grow(0.0) +"%.");

        System.out.println(whale.getName() + ", " + whale.vertebra() + " позвончник выполняет функцию защиты: " +
                whale.protect(true) + ", особь опускается на глубину: " + whale.dive(9500) + " м" +
                " и развивает скорость до " + whale.swim(49.8) + "км/ч.");

        System.out.println(bear.getName() + ", возраст: " + bear.getAge() +
                bear.vertebra(", у данной особи мощный позвоночник") + ", вырос на " +
                bear.grow(2.2) + " м.");

        System.out.println(fish.getName() + ", развивает скорость до "+ fish.swim(3.2) + "км/ч.");
    }
}
